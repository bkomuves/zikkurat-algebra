
-- | Platform-specific code (eg. add with carry)

module Zikkurat.CodeGen.Platform where

--------------------------------------------------------------------------------

import Zikkurat.CodeGen.Misc

--------------------------------------------------------------------------------

add_with_carry_header :: Code
add_with_carry_header = 
  [ ""
  , "// === platform-specific code ==="
  , ""
  , "#include <stdint.h>"
  , ""
  , "#ifdef ARCH_X86_64"
  , ""
  , "// ------ intel/amd x86_64 with intrinsics ------"
  , ""
  , "#include <x86intrin.h>"
  , ""
  , "inline uint8_t addcarry_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  return _addcarry_u64( carry, arg1, arg2, *tgt );"
  , "}"
  , ""
  , "inline uint8_t subborrow_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  return _subborrow_u64( carry, arg1, arg2, *tgt );"
  , "}"
  , ""
  , "inline uint8_t addcarry_u128_inplace(  uint64_t *tgt_lo, uint64_t *tgt_hi, uint64_t arg_lo, uint64_t arg_hi) {"
  , "  uint8_t c;"
  , "  c = _addcarry_u64( 0, *tgt_lo, arg_lo, tgt_lo );"
  , "  c = _addcarry_u64( c, *tgt_hi, arg_hi, tgt_hi );"
  , "  return c;"
  , "}"
  , ""
  , "#else"
  , ""
  , "// ------ portable implementation for generic 64-bit architectures ------"
  , ""
  , "inline uint8_t addcarry_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  uint64_t u;"
  , "  u = arg1 + arg2 + carry;"
  , "  *tgt = u;"
  , "  return ( (carry) ? (u <= arg1) : (u < arg1) );"
  , "}"
  , ""
  , "inline uint8_t subborrow_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  uint64_t u;"
  , "  u = arg1 - arg2 - carry;"
  , "  *tgt = u;"
  , "  return ( (carry) ? (u >= arg1) : (u > arg1) );"
  , "}"
  , ""
  , "inline uint8_t addcarry_u128_inplace( uint64_t *tgt_lo, uint64_t *tgt_hi, uint64_t arg_lo, uint64_t arg_hi) {"
  , "  uint8_t  c;"
  , "  uint64_t u,v;"
  , "  u = tgt_lo[0] + arg_lo;"
  , "  c = (u < arg_lo) ? 1 : 0; "
  , "  c = addcarry_u64( c, tgt_hi[0], arg_hi, tgt_hi );"
  , "  *tgt_lo = u;"
  , "  *tgt_hi = v;"
  , "  return c;"
  , "}"
  , ""
  , "#endif"
  ]

add_with_carry_wrapper :: Code
add_with_carry_wrapper = 
  [ ""
  , "#include \"platform.h\""
  , ""
  , "uint8_t wrap_addcarry_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  return addcarry_u64( carry, arg1, arg2, tgt );"
  , "}"
  , ""
  , "uint8_t wrap_subborrow_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt ) {"
  , "  return subborrow_u64( carry, arg1, arg2, tgt );"
  , "}"
  , ""
  , "uint8_t wrap_addcarry_u128_inplace( uint64_t *tgt_lo, uint64_t *tgt_hi, uint64_t arg_lo, uint64_t arg_hi) {"
  , "  return addcarry_u128_inplace( tgt_lo, tgt_hi, arg_lo, arg_hi); "
  , "}"
  , ""
  ]

--------------------------------------------------------------------------------

hsAddCarry :: Code
hsAddCarry =
  [ "-- | Wrappers around platform-specific code"
  , "-- (for testing purposes only!)"
  , ""
  , "{-# LANGUAGE BangPatterns, ForeignFunctionInterface #-}"
  , "module ZK.Algebra.BigInt.Platform where"
  , ""
  , "--------------------------------------------------------------------------------"
  , ""
  , "import Data.Bits"
  , "import Data.Word"
  , ""
  , "import Control.Monad"
  , ""
  , "import Foreign.C"
  , "import Foreign.Ptr"
  , "import Foreign.Marshal"
  , "import Foreign.Storable"
  , ""
  , "import System.IO.Unsafe"
  , ""
  , "--------------------------------------------------------------------------------  "
  , ""
  , "-- uint8_t wrap_addcarry_u64 ( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt );"
  , "-- uint8_t wrap_subborrow_u64( uint8_t carry, uint64_t arg1, uint64_t arg2, uint64_t *tgt );"
  , "-- uint8_t wrap_addcarry_u128_inplace( uint64_t *tgt_lo, uint64_t *tgt_hi, uint64_t arg_lo, uint64_t arg_hi);"
  , ""
  , "foreign import ccall unsafe \"wrap_addcarry_u64\"  c_addcarry_u64  :: Word8 -> Word64 -> Word64 -> Ptr Word64 -> IO Word8"
  , "foreign import ccall unsafe \"wrap_subborrow_u64\" c_subborrow_u64 :: Word8 -> Word64 -> Word64 -> Ptr Word64 -> IO Word8"
  , "foreign import ccall unsafe \"wrap_addcarry_u128_inplace\" c_addcarry_u128_inplace :: Ptr Word64 -> Ptr Word64 -> Word64 -> Word64 -> IO Word8"
  , ""
  , "{-# NOINLINE addCarry64 #-}"
  , "addCarry64 :: Bool -> Word64 -> Word64 -> (Bool, Word64)"
  , "addCarry64 carry arg1 arg2 = unsafePerformIO $ do"
  , "  alloca $ \\ptr -> do"
  , "    d   <- c_addcarry_u64 (if carry then 1 else 0) arg1 arg2 ptr"
  , "    out <- peek ptr"
  , "    return (d /= 0, out)"
  , ""
  , "{-# NOINLINE subBorrow64 #-}"
  , "subBorrow64 :: Bool -> Word64 -> Word64 -> (Bool, Word64)"
  , "subBorrow64 carry arg1 arg2 = unsafePerformIO $ do"
  , "  alloca $ \\ptr -> do"
  , "    d   <- c_subborrow_u64 (if carry then 1 else 0) arg1 arg2 ptr"
  , "    out <- peek ptr"
  , "    return (d /= 0, out)"
  , ""
  , "{-# NOINLINE addCarry128 #-}"
  , "addCarry128 :: (Word64,Word64) -> (Word64,Word64) -> (Bool, (Word64,Word64))"
  , "addCarry128 (lo1,hi1) (lo2,hi2) = unsafePerformIO $ do"
  , "  alloca $ \\ptrLo -> alloca $ \\ptrHi -> do"
  , "    poke ptrLo lo1"
  , "    poke ptrHi hi1"
  , "    d     <- c_addcarry_u128_inplace ptrLo ptrHi lo2 hi2"
  , "    outLo <- peek ptrLo"
  , "    outHi <- peek ptrHi"
  , "    return (d /= 0, (outLo,outHi))"
  , ""
  ]

--------------------------------------------------------------------------------

