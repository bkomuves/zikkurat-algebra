
-- | FFT-friendly fields

{-# LANGUAGE StrictData, ScopedTypeVariables, TypeApplications #-}
module ZK.Algebra.Class.FFT where

--------------------------------------------------------------------------------

import ZK.Algebra.Class.Field
import ZK.Algebra.Class.Misc
  
--------------------------------------------------------------------------------
-- * Synonyms

type FFTDomain a = FFTSubgroup a

fftDomainSize :: FFTDomain a -> Int
fftDomainSize = fftSubgroupSize

getFFTDomain :: forall a. FFTField a => Log2 -> FFTDomain a
getFFTDomain = getFFTSubgroup

--------------------------------------------------------------------------------
-- * FFT-friendly cyclic subgroups

-- | An FFT-friendly cyclic subgroup of the multiplicative group of a finite field
data FFTSubgroup a = MkFFTSubgroup
  { fftSubgroupGen     :: !a        -- ^ the generator of the subgroup
  , fftSubgroupLogSize :: !Log2     -- ^ @log2@ of the size of the subgroup
  }
  deriving (Eq,Show)

-- | The size of the subgroup
fftSubgroupSize :: FFTSubgroup a -> Int
fftSubgroupSize sg = fromInteger $ exp2 (fftSubgroupLogSize sg)

-- | Elements of the subgroup in standard order:
--
-- > [ 1, g, g^2, g^3, ... g^(n-1) ]
--
enumerateSubgroup :: forall a. Field a => FFTSubgroup a -> [a]
enumerateSubgroup (MkFFTSubgroup g m) = go (fromInteger $ exp2 m) 1 where
  go :: Int -> a -> [a] 
  go 0 _ = []
  go k x = x : go (k-1) (g*x)

-- | The subgroup half the size, generated by @g^2@
halveSubgroup :: Field a => FFTSubgroup a -> FFTSubgroup a 
halveSubgroup (MkFFTSubgroup gen k)
  | k <= 0    = error "halveSubgroup: it's already the trivial subgroup"
  | otherwise = MkFFTSubgroup (square gen) (k-1)

--------------------------------------------------------------------------------

class Field a => FFTField a where
  -- | The largest power-of-two multiplicative subgroup the field supports
  theFFTDomain :: FFTSubgroup a      

-- | Given @n@, we construct the subgroup of size @2^n@
getFFTSubgroup :: forall a. FFTField a => Log2 -> FFTSubgroup a
getFFTSubgroup k 
  | k < 0     = error $ "getFFTSubGroup: expecting a nonnegative input (desired logarithmic size)"
  | k > m     = error $ "getFFTSubGroup: this field supports FFT subgroups of size at most 2^" ++ show im ++ " = " ++ show (exp2 m)
  | otherwise = let g = power gen (exp2 (m-k)) 
                in  MkFFTSubgroup g k
  where
    domain@(MkFFTSubgroup gen m) = theFFTDomain @a
    Log2 im = m

--------------------------------------------------------------------------------
